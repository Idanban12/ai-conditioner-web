// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String   @id @default(cuid())
  name            String?
  email           String   @unique
  emailVerified   DateTime?
  image           String?
  subjectName     String?  
  dominantName    String?
  subjectGender   Gender?
  dominantGender  Gender?
  favoriteThemes  UserFavoriteTheme[]
  accounts        Account[]
  sessions        Session[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Theme {
  id              Int      @id @default(autoincrement())
  name            String   @unique
  description     String?
  category        String?
  templates       Template[]
  favoriteBy      UserFavoriteTheme[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Template {
  id              Int        @id @default(autoincrement())
  templateText    String     // Old-style templating: "{subject_subjective} [worship|worships]..."
  difficulty      Difficulty
  lineType        LineType?
  themeId         Int
  theme           Theme      @relation(fields: [themeId], references: [id])
  lines           Line[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Line {
  id              Int      @id @default(autoincrement())
  templateId      Int
  renderedText    String   // Final rendered text for TTS
  pollyText       String?  // Override for pronunciation
  subject         String?
  dominant        String?
  audioHash       String?  // SHA256 hash for audio file
  audioPath       String?  // Path to MP3 file
  audioLength     Float?   // Duration in seconds
  template        Template @relation(fields: [templateId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model UserFavoriteTheme {
  userId    String
  themeId   Int
  user      User   @relation(fields: [userId], references: [id])
  theme     Theme  @relation(fields: [themeId], references: [id])
  @@id([userId, themeId])
}

enum Difficulty {
  BASIC
  LIGHT  
  MODERATE
  DEEP
  EXTREME
}

enum Gender {
  M
  F
  NONE
}

enum LineType {
  INDUCTION
  DEEPENER
  SUGGESTION
  EMERGENCE
  MANTRA
  AROUSAL
  BEHAVIORAL
}